// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Weather.DAL.graphical.weather.gov {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ndfdXMLBinding", Namespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
    public partial class ndfdXML : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback NDFDgenOperationCompleted;
        
        private System.Threading.SendOrPostCallback NDFDgenByDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback NDFDgenLatLonListOperationCompleted;
        
        private System.Threading.SendOrPostCallback NDFDgenByDayLatLonListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GmlLatLonListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GmlTimeSeriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback LatLonListSubgridOperationCompleted;
        
        private System.Threading.SendOrPostCallback LatLonListLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback LatLonListZipCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback LatLonListSquareOperationCompleted;
        
        private System.Threading.SendOrPostCallback CornerPointsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LatLonListCityNamesOperationCompleted;
        
        /// CodeRemarks
        public ndfdXML() {
            this.Url = "http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php";
        }
        
        public ndfdXML(string url) {
            this.Url = url;
        }
        
        /// CodeRemarks
        public event NDFDgenCompletedEventHandler NDFDgenCompleted;
        
        /// CodeRemarks
        public event NDFDgenByDayCompletedEventHandler NDFDgenByDayCompleted;
        
        /// CodeRemarks
        public event NDFDgenLatLonListCompletedEventHandler NDFDgenLatLonListCompleted;
        
        /// CodeRemarks
        public event NDFDgenByDayLatLonListCompletedEventHandler NDFDgenByDayLatLonListCompleted;
        
        /// CodeRemarks
        public event GmlLatLonListCompletedEventHandler GmlLatLonListCompleted;
        
        /// CodeRemarks
        public event GmlTimeSeriesCompletedEventHandler GmlTimeSeriesCompleted;
        
        /// CodeRemarks
        public event LatLonListSubgridCompletedEventHandler LatLonListSubgridCompleted;
        
        /// CodeRemarks
        public event LatLonListLineCompletedEventHandler LatLonListLineCompleted;
        
        /// CodeRemarks
        public event LatLonListZipCodeCompletedEventHandler LatLonListZipCodeCompleted;
        
        /// CodeRemarks
        public event LatLonListSquareCompletedEventHandler LatLonListSquareCompleted;
        
        /// CodeRemarks
        public event CornerPointsCompletedEventHandler CornerPointsCompleted;
        
        /// CodeRemarks
        public event LatLonListCityNamesCompletedEventHandler LatLonListCityNamesCompleted;
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgen", RequestNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl", ResponseNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("dwmlOut")]
        public string NDFDgen(decimal latitude, decimal longitude, productType product, System.DateTime startTime, System.DateTime endTime, unitType Unit, weatherParametersType weatherParameters) {
            object[] results = this.Invoke("NDFDgen", new object[] {
                        latitude,
                        longitude,
                        product,
                        startTime,
                        endTime,
                        Unit,
                        weatherParameters});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void NDFDgenAsync(decimal latitude, decimal longitude, productType product, System.DateTime startTime, System.DateTime endTime, unitType Unit, weatherParametersType weatherParameters) {
            this.NDFDgenAsync(latitude, longitude, product, startTime, endTime, Unit, weatherParameters, null);
        }
        
        /// CodeRemarks
        public void NDFDgenAsync(decimal latitude, decimal longitude, productType product, System.DateTime startTime, System.DateTime endTime, unitType Unit, weatherParametersType weatherParameters, object userState) {
            if ((this.NDFDgenOperationCompleted == null)) {
                this.NDFDgenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNDFDgenOperationCompleted);
            }
            this.InvokeAsync("NDFDgen", new object[] {
                        latitude,
                        longitude,
                        product,
                        startTime,
                        endTime,
                        Unit,
                        weatherParameters}, this.NDFDgenOperationCompleted, userState);
        }
        
        private void OnNDFDgenOperationCompleted(object arg) {
            if ((this.NDFDgenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NDFDgenCompleted(this, new NDFDgenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDay", RequestNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl", ResponseNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("dwmlByDayOut")]
        public string NDFDgenByDay(decimal latitude, decimal longitude, [System.Xml.Serialization.SoapElementAttribute(DataType="date")] System.DateTime startDate, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string numDays, unitType Unit, formatType format) {
            object[] results = this.Invoke("NDFDgenByDay", new object[] {
                        latitude,
                        longitude,
                        startDate,
                        numDays,
                        Unit,
                        format});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void NDFDgenByDayAsync(decimal latitude, decimal longitude, System.DateTime startDate, string numDays, unitType Unit, formatType format) {
            this.NDFDgenByDayAsync(latitude, longitude, startDate, numDays, Unit, format, null);
        }
        
        /// CodeRemarks
        public void NDFDgenByDayAsync(decimal latitude, decimal longitude, System.DateTime startDate, string numDays, unitType Unit, formatType format, object userState) {
            if ((this.NDFDgenByDayOperationCompleted == null)) {
                this.NDFDgenByDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNDFDgenByDayOperationCompleted);
            }
            this.InvokeAsync("NDFDgenByDay", new object[] {
                        latitude,
                        longitude,
                        startDate,
                        numDays,
                        Unit,
                        format}, this.NDFDgenByDayOperationCompleted, userState);
        }
        
        private void OnNDFDgenByDayOperationCompleted(object arg) {
            if ((this.NDFDgenByDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NDFDgenByDayCompleted(this, new NDFDgenByDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenLatLonList", RequestNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl", ResponseNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("dwmlOut")]
        public string NDFDgenLatLonList(string listLatLon, productType product, System.DateTime startTime, System.DateTime endTime, unitType Unit, weatherParametersType weatherParameters) {
            object[] results = this.Invoke("NDFDgenLatLonList", new object[] {
                        listLatLon,
                        product,
                        startTime,
                        endTime,
                        Unit,
                        weatherParameters});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void NDFDgenLatLonListAsync(string listLatLon, productType product, System.DateTime startTime, System.DateTime endTime, unitType Unit, weatherParametersType weatherParameters) {
            this.NDFDgenLatLonListAsync(listLatLon, product, startTime, endTime, Unit, weatherParameters, null);
        }
        
        /// CodeRemarks
        public void NDFDgenLatLonListAsync(string listLatLon, productType product, System.DateTime startTime, System.DateTime endTime, unitType Unit, weatherParametersType weatherParameters, object userState) {
            if ((this.NDFDgenLatLonListOperationCompleted == null)) {
                this.NDFDgenLatLonListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNDFDgenLatLonListOperationCompleted);
            }
            this.InvokeAsync("NDFDgenLatLonList", new object[] {
                        listLatLon,
                        product,
                        startTime,
                        endTime,
                        Unit,
                        weatherParameters}, this.NDFDgenLatLonListOperationCompleted, userState);
        }
        
        private void OnNDFDgenLatLonListOperationCompleted(object arg) {
            if ((this.NDFDgenLatLonListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NDFDgenLatLonListCompleted(this, new NDFDgenLatLonListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDayLatLonList", RequestNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl", ResponseNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("dwmlByDayOut")]
        public string NDFDgenByDayLatLonList(string listLatLon, [System.Xml.Serialization.SoapElementAttribute(DataType="date")] System.DateTime startDate, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string numDays, unitType Unit, formatType format) {
            object[] results = this.Invoke("NDFDgenByDayLatLonList", new object[] {
                        listLatLon,
                        startDate,
                        numDays,
                        Unit,
                        format});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void NDFDgenByDayLatLonListAsync(string listLatLon, System.DateTime startDate, string numDays, unitType Unit, formatType format) {
            this.NDFDgenByDayLatLonListAsync(listLatLon, startDate, numDays, Unit, format, null);
        }
        
        /// CodeRemarks
        public void NDFDgenByDayLatLonListAsync(string listLatLon, System.DateTime startDate, string numDays, unitType Unit, formatType format, object userState) {
            if ((this.NDFDgenByDayLatLonListOperationCompleted == null)) {
                this.NDFDgenByDayLatLonListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNDFDgenByDayLatLonListOperationCompleted);
            }
            this.InvokeAsync("NDFDgenByDayLatLonList", new object[] {
                        listLatLon,
                        startDate,
                        numDays,
                        Unit,
                        format}, this.NDFDgenByDayLatLonListOperationCompleted, userState);
        }
        
        private void OnNDFDgenByDayLatLonListOperationCompleted(object arg) {
            if ((this.NDFDgenByDayLatLonListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NDFDgenByDayLatLonListCompleted(this, new NDFDgenByDayLatLonListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlLatLonList", RequestNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl", ResponseNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("dwGmlOut")]
        public string GmlLatLonList(string listLatLon, System.DateTime requestedTime, featureTypeType featureType, weatherParametersType weatherParameters) {
            object[] results = this.Invoke("GmlLatLonList", new object[] {
                        listLatLon,
                        requestedTime,
                        featureType,
                        weatherParameters});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GmlLatLonListAsync(string listLatLon, System.DateTime requestedTime, featureTypeType featureType, weatherParametersType weatherParameters) {
            this.GmlLatLonListAsync(listLatLon, requestedTime, featureType, weatherParameters, null);
        }
        
        /// CodeRemarks
        public void GmlLatLonListAsync(string listLatLon, System.DateTime requestedTime, featureTypeType featureType, weatherParametersType weatherParameters, object userState) {
            if ((this.GmlLatLonListOperationCompleted == null)) {
                this.GmlLatLonListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGmlLatLonListOperationCompleted);
            }
            this.InvokeAsync("GmlLatLonList", new object[] {
                        listLatLon,
                        requestedTime,
                        featureType,
                        weatherParameters}, this.GmlLatLonListOperationCompleted, userState);
        }
        
        private void OnGmlLatLonListOperationCompleted(object arg) {
            if ((this.GmlLatLonListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GmlLatLonListCompleted(this, new GmlLatLonListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlTimeSeries", RequestNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl", ResponseNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("dwGmlOut")]
        public string GmlTimeSeries(string listLatLon, System.DateTime startTime, System.DateTime endTime, compTypeType compType, featureTypeType featureType, string propertyName) {
            object[] results = this.Invoke("GmlTimeSeries", new object[] {
                        listLatLon,
                        startTime,
                        endTime,
                        compType,
                        featureType,
                        propertyName});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GmlTimeSeriesAsync(string listLatLon, System.DateTime startTime, System.DateTime endTime, compTypeType compType, featureTypeType featureType, string propertyName) {
            this.GmlTimeSeriesAsync(listLatLon, startTime, endTime, compType, featureType, propertyName, null);
        }
        
        /// CodeRemarks
        public void GmlTimeSeriesAsync(string listLatLon, System.DateTime startTime, System.DateTime endTime, compTypeType compType, featureTypeType featureType, string propertyName, object userState) {
            if ((this.GmlTimeSeriesOperationCompleted == null)) {
                this.GmlTimeSeriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGmlTimeSeriesOperationCompleted);
            }
            this.InvokeAsync("GmlTimeSeries", new object[] {
                        listLatLon,
                        startTime,
                        endTime,
                        compType,
                        featureType,
                        propertyName}, this.GmlTimeSeriesOperationCompleted, userState);
        }
        
        private void OnGmlTimeSeriesOperationCompleted(object arg) {
            if ((this.GmlTimeSeriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GmlTimeSeriesCompleted(this, new GmlTimeSeriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSubgrid", RequestNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl", ResponseNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("listLatLonOut")]
        public string LatLonListSubgrid(decimal lowerLeftLatitude, decimal lowerLeftLongitude, decimal upperRightLatitude, decimal upperRightLongitude, decimal resolution) {
            object[] results = this.Invoke("LatLonListSubgrid", new object[] {
                        lowerLeftLatitude,
                        lowerLeftLongitude,
                        upperRightLatitude,
                        upperRightLongitude,
                        resolution});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void LatLonListSubgridAsync(decimal lowerLeftLatitude, decimal lowerLeftLongitude, decimal upperRightLatitude, decimal upperRightLongitude, decimal resolution) {
            this.LatLonListSubgridAsync(lowerLeftLatitude, lowerLeftLongitude, upperRightLatitude, upperRightLongitude, resolution, null);
        }
        
        /// CodeRemarks
        public void LatLonListSubgridAsync(decimal lowerLeftLatitude, decimal lowerLeftLongitude, decimal upperRightLatitude, decimal upperRightLongitude, decimal resolution, object userState) {
            if ((this.LatLonListSubgridOperationCompleted == null)) {
                this.LatLonListSubgridOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLatLonListSubgridOperationCompleted);
            }
            this.InvokeAsync("LatLonListSubgrid", new object[] {
                        lowerLeftLatitude,
                        lowerLeftLongitude,
                        upperRightLatitude,
                        upperRightLongitude,
                        resolution}, this.LatLonListSubgridOperationCompleted, userState);
        }
        
        private void OnLatLonListSubgridOperationCompleted(object arg) {
            if ((this.LatLonListSubgridCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LatLonListSubgridCompleted(this, new LatLonListSubgridCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListLine", RequestNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl", ResponseNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("listLatLonOut")]
        public string LatLonListLine(decimal endPoint1Lat, decimal endPoint1Lon, decimal endPoint2Lat, decimal endPoint2Lon) {
            object[] results = this.Invoke("LatLonListLine", new object[] {
                        endPoint1Lat,
                        endPoint1Lon,
                        endPoint2Lat,
                        endPoint2Lon});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void LatLonListLineAsync(decimal endPoint1Lat, decimal endPoint1Lon, decimal endPoint2Lat, decimal endPoint2Lon) {
            this.LatLonListLineAsync(endPoint1Lat, endPoint1Lon, endPoint2Lat, endPoint2Lon, null);
        }
        
        /// CodeRemarks
        public void LatLonListLineAsync(decimal endPoint1Lat, decimal endPoint1Lon, decimal endPoint2Lat, decimal endPoint2Lon, object userState) {
            if ((this.LatLonListLineOperationCompleted == null)) {
                this.LatLonListLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLatLonListLineOperationCompleted);
            }
            this.InvokeAsync("LatLonListLine", new object[] {
                        endPoint1Lat,
                        endPoint1Lon,
                        endPoint2Lat,
                        endPoint2Lon}, this.LatLonListLineOperationCompleted, userState);
        }
        
        private void OnLatLonListLineOperationCompleted(object arg) {
            if ((this.LatLonListLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LatLonListLineCompleted(this, new LatLonListLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListZipCode", RequestNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl", ResponseNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("listLatLonOut")]
        public string LatLonListZipCode(string zipCodeList) {
            object[] results = this.Invoke("LatLonListZipCode", new object[] {
                        zipCodeList});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void LatLonListZipCodeAsync(string zipCodeList) {
            this.LatLonListZipCodeAsync(zipCodeList, null);
        }
        
        /// CodeRemarks
        public void LatLonListZipCodeAsync(string zipCodeList, object userState) {
            if ((this.LatLonListZipCodeOperationCompleted == null)) {
                this.LatLonListZipCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLatLonListZipCodeOperationCompleted);
            }
            this.InvokeAsync("LatLonListZipCode", new object[] {
                        zipCodeList}, this.LatLonListZipCodeOperationCompleted, userState);
        }
        
        private void OnLatLonListZipCodeOperationCompleted(object arg) {
            if ((this.LatLonListZipCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LatLonListZipCodeCompleted(this, new LatLonListZipCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSquare", RequestNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl", ResponseNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("listLatLonOut")]
        public string LatLonListSquare(decimal centerPointLat, decimal centerPointLon, decimal distanceLat, decimal distanceLon, decimal resolution) {
            object[] results = this.Invoke("LatLonListSquare", new object[] {
                        centerPointLat,
                        centerPointLon,
                        distanceLat,
                        distanceLon,
                        resolution});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void LatLonListSquareAsync(decimal centerPointLat, decimal centerPointLon, decimal distanceLat, decimal distanceLon, decimal resolution) {
            this.LatLonListSquareAsync(centerPointLat, centerPointLon, distanceLat, distanceLon, resolution, null);
        }
        
        /// CodeRemarks
        public void LatLonListSquareAsync(decimal centerPointLat, decimal centerPointLon, decimal distanceLat, decimal distanceLon, decimal resolution, object userState) {
            if ((this.LatLonListSquareOperationCompleted == null)) {
                this.LatLonListSquareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLatLonListSquareOperationCompleted);
            }
            this.InvokeAsync("LatLonListSquare", new object[] {
                        centerPointLat,
                        centerPointLon,
                        distanceLat,
                        distanceLon,
                        resolution}, this.LatLonListSquareOperationCompleted, userState);
        }
        
        private void OnLatLonListSquareOperationCompleted(object arg) {
            if ((this.LatLonListSquareCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LatLonListSquareCompleted(this, new LatLonListSquareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#CornerPoints", RequestNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl", ResponseNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("listLatLonOut")]
        public string CornerPoints(sectorType sector) {
            object[] results = this.Invoke("CornerPoints", new object[] {
                        sector});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void CornerPointsAsync(sectorType sector) {
            this.CornerPointsAsync(sector, null);
        }
        
        /// CodeRemarks
        public void CornerPointsAsync(sectorType sector, object userState) {
            if ((this.CornerPointsOperationCompleted == null)) {
                this.CornerPointsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCornerPointsOperationCompleted);
            }
            this.InvokeAsync("CornerPoints", new object[] {
                        sector}, this.CornerPointsOperationCompleted, userState);
        }
        
        private void OnCornerPointsOperationCompleted(object arg) {
            if ((this.CornerPointsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CornerPointsCompleted(this, new CornerPointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListCityNames", RequestNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl", ResponseNamespace="http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("listCityNamesOut")]
        public string LatLonListCityNames([System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string displayLevel) {
            object[] results = this.Invoke("LatLonListCityNames", new object[] {
                        displayLevel});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void LatLonListCityNamesAsync(string displayLevel) {
            this.LatLonListCityNamesAsync(displayLevel, null);
        }
        
        /// CodeRemarks
        public void LatLonListCityNamesAsync(string displayLevel, object userState) {
            if ((this.LatLonListCityNamesOperationCompleted == null)) {
                this.LatLonListCityNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLatLonListCityNamesOperationCompleted);
            }
            this.InvokeAsync("LatLonListCityNames", new object[] {
                        displayLevel}, this.LatLonListCityNamesOperationCompleted, userState);
        }
        
        private void OnLatLonListCityNamesOperationCompleted(object arg) {
            if ((this.LatLonListCityNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LatLonListCityNamesCompleted(this, new LatLonListCityNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd")]
    public enum productType {
        
        /// <remarks/>
        [System.Xml.Serialization.SoapEnumAttribute("time-series")]
        timeseries,
        
        /// <remarks/>
        glance,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd")]
    public enum unitType {
        
        /// <remarks/>
        e,
        
        /// <remarks/>
        m,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd")]
    public partial class weatherParametersType {
        
        /// <remarks/>
        public bool maxt;
        
        /// <remarks/>
        public bool mint;
        
        /// <remarks/>
        public bool temp;
        
        /// <remarks/>
        public bool dew;
        
        /// <remarks/>
        public bool pop12;
        
        /// <remarks/>
        public bool qpf;
        
        /// <remarks/>
        public bool sky;
        
        /// <remarks/>
        public bool snow;
        
        /// <remarks/>
        public bool wspd;
        
        /// <remarks/>
        public bool wdir;
        
        /// <remarks/>
        public bool wx;
        
        /// <remarks/>
        public bool waveh;
        
        /// <remarks/>
        public bool icons;
        
        /// <remarks/>
        public bool rh;
        
        /// <remarks/>
        public bool appt;
        
        /// <remarks/>
        public bool incw34;
        
        /// <remarks/>
        public bool incw50;
        
        /// <remarks/>
        public bool incw64;
        
        /// <remarks/>
        public bool cumw34;
        
        /// <remarks/>
        public bool cumw50;
        
        /// <remarks/>
        public bool cumw64;
        
        /// <remarks/>
        public bool critfireo;
        
        /// <remarks/>
        public bool dryfireo;
        
        /// <remarks/>
        public bool conhazo;
        
        /// <remarks/>
        public bool ptornado;
        
        /// <remarks/>
        public bool phail;
        
        /// <remarks/>
        public bool ptstmwinds;
        
        /// <remarks/>
        public bool pxtornado;
        
        /// <remarks/>
        public bool pxhail;
        
        /// <remarks/>
        public bool pxtstmwinds;
        
        /// <remarks/>
        public bool ptotsvrtstm;
        
        /// <remarks/>
        public bool pxtotsvrtstm;
        
        /// <remarks/>
        public bool tmpabv14d;
        
        /// <remarks/>
        public bool tmpblw14d;
        
        /// <remarks/>
        public bool tmpabv30d;
        
        /// <remarks/>
        public bool tmpblw30d;
        
        /// <remarks/>
        public bool tmpabv90d;
        
        /// <remarks/>
        public bool tmpblw90d;
        
        /// <remarks/>
        public bool prcpabv14d;
        
        /// <remarks/>
        public bool prcpblw14d;
        
        /// <remarks/>
        public bool prcpabv30d;
        
        /// <remarks/>
        public bool prcpblw30d;
        
        /// <remarks/>
        public bool prcpabv90d;
        
        /// <remarks/>
        public bool prcpblw90d;
        
        /// <remarks/>
        public bool precipa_r;
        
        /// <remarks/>
        public bool sky_r;
        
        /// <remarks/>
        public bool td_r;
        
        /// <remarks/>
        public bool temp_r;
        
        /// <remarks/>
        public bool wdir_r;
        
        /// <remarks/>
        public bool wspd_r;
        
        /// <remarks/>
        public bool wwa;
        
        /// <remarks/>
        public bool wgust;
        
        /// <remarks/>
        public bool iceaccum;
        
        /// <remarks/>
        public bool maxrh;
        
        /// <remarks/>
        public bool minrh;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd")]
    public enum formatType {
        
        /// <remarks/>
        [System.Xml.Serialization.SoapEnumAttribute("24 hourly")]
        Item24hourly,
        
        /// <remarks/>
        [System.Xml.Serialization.SoapEnumAttribute("12 hourly")]
        Item12hourly,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd")]
    public enum featureTypeType {
        
        /// <remarks/>
        Forecast_Gml2Point,
        
        /// <remarks/>
        Forecast_Gml2AllWx,
        
        /// <remarks/>
        Forecast_GmlsfPoint,
        
        /// <remarks/>
        Forecast_GmlObs,
        
        /// <remarks/>
        NdfdMultiPointCoverage,
        
        /// <remarks/>
        Ndfd_KmlPoint,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd")]
    public enum compTypeType {
        
        /// <remarks/>
        IsEqual,
        
        /// <remarks/>
        Between,
        
        /// <remarks/>
        GreaterThan,
        
        /// <remarks/>
        GreaterThanEqualTo,
        
        /// <remarks/>
        LessThan,
        
        /// <remarks/>
        LessThanEqualTo,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd")]
    public enum sectorType {
        
        /// <remarks/>
        conus,
        
        /// <remarks/>
        nhemi,
        
        /// <remarks/>
        alaska,
        
        /// <remarks/>
        guam,
        
        /// <remarks/>
        hawaii,
        
        /// <remarks/>
        puertori,
        
        /// <remarks/>
        npacocn,
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void NDFDgenCompletedEventHandler(object sender, NDFDgenCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NDFDgenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NDFDgenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void NDFDgenByDayCompletedEventHandler(object sender, NDFDgenByDayCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NDFDgenByDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NDFDgenByDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void NDFDgenLatLonListCompletedEventHandler(object sender, NDFDgenLatLonListCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NDFDgenLatLonListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NDFDgenLatLonListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void NDFDgenByDayLatLonListCompletedEventHandler(object sender, NDFDgenByDayLatLonListCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NDFDgenByDayLatLonListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NDFDgenByDayLatLonListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GmlLatLonListCompletedEventHandler(object sender, GmlLatLonListCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GmlLatLonListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GmlLatLonListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GmlTimeSeriesCompletedEventHandler(object sender, GmlTimeSeriesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GmlTimeSeriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GmlTimeSeriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void LatLonListSubgridCompletedEventHandler(object sender, LatLonListSubgridCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LatLonListSubgridCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LatLonListSubgridCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void LatLonListLineCompletedEventHandler(object sender, LatLonListLineCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LatLonListLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LatLonListLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void LatLonListZipCodeCompletedEventHandler(object sender, LatLonListZipCodeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LatLonListZipCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LatLonListZipCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void LatLonListSquareCompletedEventHandler(object sender, LatLonListSquareCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LatLonListSquareCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LatLonListSquareCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void CornerPointsCompletedEventHandler(object sender, CornerPointsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CornerPointsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CornerPointsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void LatLonListCityNamesCompletedEventHandler(object sender, LatLonListCityNamesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LatLonListCityNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LatLonListCityNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
